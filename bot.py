import asyncio
import logging
import os
from datetime import timedelta
from typing import Dict, List, Tuple

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaDocument,
    InputMediaAudio,
    InputMediaAnimation,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ env ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))
if not API_TOKEN or not ADMIN_CHAT_ID:
    raise RuntimeError("–ó–∞–ø–æ–ª–Ω–∏ BOT_TOKEN –∏ ADMIN_CHAT_ID –≤ .env")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ logging ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
logging.basicConfig(level=logging.INFO)
log = logging.getLogger("bot_mentalburo")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# admin_id -> user_id (–∫–æ–º—É –∞–¥–º–∏–Ω —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á–∞–µ—Ç)
reply_targets: Dict[int, int] = {}

# –ö–æ–ø–∏–º —á–∞—Å—Ç–∏ –∞–ª—å–±–æ–º–æ–≤ –∏ —à–ª—ë–º –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º
album_buffer: Dict[Tuple[int, str], List] = {}
album_timer_running: Dict[Tuple[int, str], bool] = {}
ALBUM_FLUSH_DELAY = 1.4  # —Å–µ–∫

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ UI ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def reply_keyboard(user_id: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply:{user_id}")],
            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="cancel")],
        ]
    )

def admin_caption(prefix: str, text: str) -> str:
    return f"{prefix}\n\n{text}" if text else prefix

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –≤—Å–µ–π –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ, —Ç–∞–∫ –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º ü§ù\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ (–≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–∏—Ö –°–î–í–ì –∏ –ø–ª–æ—Ç–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ä–∞–±–æ—Ç—ã –∏ –æ–±—É—á–µ–Ω–∏—è), "
        "—á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å ‚úçÔ∏è –û—Ç–≤–µ—Ç—ã –º—ã –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª, –Ω–æ —Ç–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —Å–∞–º–æ–º –±–æ—Ç–µ."
    )

@dp.message(Command("here"))
async def cmd_here(message: types.Message):
    await message.answer(f"chat id: {message.chat.id}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ê–ª—å–±–æ–º—ã (media_group) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message(F.media_group_id)
async def on_album_part(message: types.Message):
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üåÑ")

    key = (message.chat.id, str(message.media_group_id))
    media_list = album_buffer.setdefault(key, [])

    caption = message.caption or ""
    if message.photo:
        media_list.append(InputMediaPhoto(media=message.photo[-1].file_id, caption=caption if not media_list else None))
    elif message.video:
        media_list.append(InputMediaVideo(media=message.video.file_id, caption=caption if not media_list else None))
    elif message.document:
        media_list.append(InputMediaDocument(media=message.document.file_id, caption=caption if not media_list else None))
    elif message.audio:
        media_list.append(InputMediaAudio(media=message.audio.file_id, caption=caption if not media_list else None))
    elif message.animation:
        media_list.append(InputMediaAnimation(media=message.animation.file_id, caption=caption if not media_list else None))

    if not album_timer_running.get(key):
        album_timer_running[key] = True
        asyncio.create_task(flush_album_later(key, message))

async def flush_album_later(key: Tuple[int, str], any_message: types.Message):
    await asyncio.sleep(ALBUM_FLUSH_DELAY)

    media = album_buffer.pop(key, [])
    album_timer_running.pop(key, None)
    if not media:
        return

    ts = (any_message.date + timedelta(hours=3)).strftime("%d.%m.%Y %H:%M")
    header = f"üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–∞–ª—å–±–æ–º)\nüïì {ts}"
    user_id = any_message.from_user.id

    if not getattr(media[0], "caption", None):
        media[0].caption = "üìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–ª—å–±–æ–º"

    try:
        await bot.send_media_group(chat_id=ADMIN_CHAT_ID, media=media)
        await bot.send_message(
            ADMIN_CHAT_ID,
            admin_caption(header, media[0].caption or "üìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –∞–ª—å–±–æ–º"),
            reply_markup=reply_keyboard(user_id),
        )
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–ª—å–±–æ–º–∞ –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (copy_message) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.message()
async def on_any_message(message: types.Message):
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–ø–∞—Å–∏–±–æ! üåÑ")

    # 1) –ö–æ–ø–∏—Ä—É–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –µ—Å—Ç—å (–ª—é–±–æ–π —Ç–∏–ø –≤–ª–æ–∂–µ–Ω–∏–π)
    try:
        await bot.copy_message(
            chat_id=ADMIN_CHAT_ID,
            from_chat_id=message.chat.id,
            message_id=message.message_id,
        )
    except Exception as e:
        log.exception(f"copy_message –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {e}")

    # 2) –û—Ç–¥–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∫–Ω–æ–ø–∫—É ¬´–û—Ç–≤–µ—Ç–∏—Ç—å¬ª
    ts = (message.date + timedelta(hours=3)).strftime("%d.%m.%Y %H:%M")
    header = f"üì© –ù–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\nüïì {ts}"
    user_id = message.from_user.id
    text = message.text or message.caption or "üìé –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–∞–π–ª"

    try:
        await bot.send_message(
            ADMIN_CHAT_ID,
            admin_caption(header, text),
            reply_markup=reply_keyboard(user_id),
        )
    except Exception as e:
        log.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω-—á–∞—Ç: {e}")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–Ω–æ–ø–∫–∏ –∏ –æ—Ç–≤–µ—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@dp.callback_query(F.data.startswith("reply:"))
async def cb_reply(callback: types.CallbackQuery):
    if callback.message.chat.id != ADMIN_CHAT_ID:
        await callback.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∑–¥–µ—Å—å.", show_alert=True)
        return

    target_user_id = int(callback.data.split(":", 1)[1])
    reply_targets[callback.from_user.id] = target_user_id
    await callback.message.reply("–ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∏–∂–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. ¬´–û—Ç–º–µ–Ω–∞¬ª ‚Äî —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
    await callback.answer("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –≤–∫–ª—é—á—ë–Ω.")

@dp.callback_query(F.data == "cancel")
async def cb_cancel(callback: types.CallbackQuery):
    reply_targets.pop(callback.from_user.id, None)
    await callback.answer("–û—Ç–º–µ–Ω–∞.")

@dp.message(F.chat.id == ADMIN_CHAT_ID)
async def on_admin_chat_message(message: types.Message):
    admin_id = message.from_user.id
    target_user = reply_targets.get(admin_id)
    if not target_user:
        return

    sent_ok = False
    try:
        if message.text and not message.caption:
            await bot.send_message(target_user, f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.text}")
            sent_ok = True
        elif message.photo:
            await bot.send_photo(target_user, message.photo[-1].file_id,
                                 caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.video:
            await bot.send_video(target_user, message.video.file_id,
                                 caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.document:
            await bot.send_document(target_user, message.document.file_id,
                                    caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.audio:
            await bot.send_audio(target_user, message.audio.file_id,
                                 caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.voice:
            await bot.send_voice(target_user, message.voice.file_id,
                                 caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.animation:
            await bot.send_animation(target_user, message.animation.file_id,
                                     caption=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞:\n\n{message.caption or ''}")
            sent_ok = True
        elif message.sticker:
            await bot.send_sticker(target_user, message.sticker.file_id)
            sent_ok = True
        elif message.video_note:
            await bot.send_video_note(target_user, message.video_note.file_id)
            sent_ok = True
    except Exception as e:
        log.exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user}: {e}")
        sent_ok = False

    if sent_ok:
        await message.reply("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        reply_targets.pop(admin_id, None)
    else:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –∑–∞–ø—É—Å–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
